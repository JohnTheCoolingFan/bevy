error[E0599]: the function or associated item `new` exists for struct `bevy_ecs::query::QueryState<&A>`, but its trait bounds were not satisfied
  --> tests/ui/non_sync_ref.rs:12:39
   |
12 |         let query = QueryState::<&A>::new(&mut world);
   |                                       ^^^ function or associated item cannot be called on `bevy_ecs::query::QueryState<&A>` due to unsatisfied trait bounds
   |
   = note: the following trait bounds were not satisfied:
           `&A: WorldQuery`

error[E0277]: `Cell<usize>` cannot be shared between threads safely
  --> tests/ui/non_sync_ref.rs:12:21
   |
12 |         let query = QueryState::<&A>::new(&mut world);
   |                     ^^^^^^^^^^^^^^^^ `Cell<usize>` cannot be shared between threads safely
   |
   = help: within `A`, the trait `Sync` is not implemented for `Cell<usize>`
note: required because it appears within the type `A`
  --> tests/ui/non_sync_ref.rs:5:8
   |
5  | struct A(Cell<usize>);
   |        ^
   = note: required because of the requirements on the impl of `WorldQuery` for `&A`
note: required by a bound in `bevy_ecs::query::QueryState`
  --> C:/Users/James/Git/bevy/crates/bevy_ecs/src/query/state.rs:20:26
   |
20 | pub struct QueryState<Q: WorldQuery, F: WorldQuery = ()> {
   |                          ^^^^^^^^^^ required by this bound in `bevy_ecs::query::QueryState`

error[E0277]: `Cell<usize>` cannot be shared between threads safely
   --> tests/ui/non_sync_ref.rs:16:27
    |
16  |         let value = world.get::<A>(e);
    |                           ^^^ `Cell<usize>` cannot be shared between threads safely
    |
    = help: within `A`, the trait `Sync` is not implemented for `Cell<usize>`
note: required because it appears within the type `A`
   --> tests/ui/non_sync_ref.rs:5:8
    |
5   | struct A(Cell<usize>);
    |        ^
note: required by a bound in `bevy_ecs::world::World::get`
   --> C:/Users/James/Git/bevy/crates/bevy_ecs/src/world/mod.rs:416:31
    |
416 |     pub fn get<T: Component + Sync>(&self, entity: Entity) -> Option<&T> {
    |                               ^^^^ required by this bound in `bevy_ecs::world::World::get`

error[E0277]: `Cell<usize>` cannot be shared between threads safely
  --> tests/ui/non_sync_ref.rs:20:37
   |
20 |         let value = world.entity(e).get::<A>();
   |                                     ^^^ `Cell<usize>` cannot be shared between threads safely
   |
   = help: within `A`, the trait `Sync` is not implemented for `Cell<usize>`
note: required because it appears within the type `A`
  --> tests/ui/non_sync_ref.rs:5:8
   |
5  | struct A(Cell<usize>);
   |        ^
note: required by a bound in `EntityRef::<'w>::get`
  --> C:/Users/James/Git/bevy/crates/bevy_ecs/src/world/entity_ref.rs:67:31
   |
67 |     pub fn get<T: Component + Sync>(&self) -> Option<&'w T> {
   |                               ^^^^ required by this bound in `EntityRef::<'w>::get`

error[E0277]: `Cell<usize>` cannot be shared between threads safely
   --> tests/ui/non_sync_ref.rs:24:41
    |
24  |         let value = world.entity_mut(e).get::<A>();
    |                                         ^^^ `Cell<usize>` cannot be shared between threads safely
    |
    = help: within `A`, the trait `Sync` is not implemented for `Cell<usize>`
note: required because it appears within the type `A`
   --> tests/ui/non_sync_ref.rs:5:8
    |
5   | struct A(Cell<usize>);
    |        ^
note: required by a bound in `EntityMut::<'w>::get`
   --> C:/Users/James/Git/bevy/crates/bevy_ecs/src/world/entity_ref.rs:169:31
    |
169 |     pub fn get<T: Component + Sync>(&self) -> Option<&'_ T> {
    |                               ^^^^ required by this bound in `EntityMut::<'w>::get`
